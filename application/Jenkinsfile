

pipeline {
    agent any
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['test', 'prod'], description: 'Choose the deployment environment')
    }


    environment {
        DOCKER_IMAGE = 'dugreshyadav/lens_corporation'
        EC2_HOST = 'ec2-user@15.206.172.142'    // Change IP here
        EC2_KEY = credentials('ec2-ssh-key')    // Add in Jenkins > Credentials
    }

    stages {

        stage('Set Config Based on Environment') {
            steps {
                script {
                    env.TARGET_HOST = (params.ENVIRONMENT == 'test') ? TEST_HOST : PROD_HOST
                    env.IMAGE_TAG = "${params.ENVIRONMENT}-${BUILD_NUMBER}"
                }
            }
        }

        stage('Clone Repo') {
            steps {
                git branch: 'application',
                url: 'https://github.com/durgeshyadavwork/LENS-Corporation.git'
            }
        }

        stage('Run Unit Tests') {
            steps {
                sh '''
                    pip install pytest
                    pytest > result.txt || true
                '''
                junit 'result.xml' // optional: only if pytest outputs JUnit XML
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t $DOCKER_IMAGE:${BUILD_NUMBER} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                    sh """
                        echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                        docker push $DOCKER_IMAGE:${BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent (credentials: ['ec2-ssh-key']) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST '
                        docker pull $DOCKER_IMAGE:${BUILD_NUMBER} &&
                        docker stop app || true &&
                        docker rm app || true &&
                        docker run -d --name app -p 3000:3000 $DOCKER_IMAGE:${BUILD_NUMBER}
                    '
                    """
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh 'docker rmi $DOCKER_IMAGE:${BUILD_NUMBER}'
            }
        }
    }

    
}
